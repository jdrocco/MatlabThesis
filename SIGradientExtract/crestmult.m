% This is the main function which extracts a gradient starting
% with a single embryo's mat file generated by crestprep and 
% save the result both in that file and in compfile.mat

function [gradoutmult,skinlocmult,stackermult,gradfs,change,frontend,backend,egglength,AP_x,AP_y,xsize,ysize,zsize,axboxes,depth,avgdskinloc]=crestmult(timesinseries,xsize,ysize,zsize,axboxes,depth,imchan1,imchan2,time,zstep,createdpts,dumppath,transdir,xppm,yppm,ouridx,AP_x,AP_y,skinlocmult,stackermult)

paraxes=3;
stacksize=size(imchan1,2);
pxsize=round(xsize*xppm);
pysize=round(ysize*yppm);
if(transdir==1);
    ptransize=pxsize;
else
    ptransize=pysize;
end

if(~exist('AP_x')||~exist('AP_y'))
    [AP_x,AP_y]=crestaxes(imchan2,timesinseries);
end

APxavg=mean(AP_x,1);
rAPxavg=APxavg/xppm;
APyavg=mean(AP_y,1);
rAPyavg=APyavg/yppm;
egglength=sqrt((rAPxavg(2)-rAPxavg(1))^2+(rAPyavg(2)-rAPyavg(1))^2);

if(exist(dumppath))
copyfile(dumppath,'dumpfile.mat');
end
save dumpfile egglength AP_x AP_y -append

if(~exist('skinlocmult'))
    skinlocmult=zeros(3,timesinseries,axboxes);

    for n=1:paraxes
        k=mod(n,3)+1;
        for i=1:timesinseries
            axlen=sqrt((AP_x(i,1)-AP_x(i,2))^2+(AP_y(i,1)-AP_y(i,2))^2);
            AP_xuse(i,:)=AP_x(i,:)-(2*ptransize)*(k-2)*(AP_y(i,1)-AP_y(i,2))/axlen;
            AP_yuse(i,:)=AP_y(i,:)+(2*ptransize)*(k-2)*(AP_x(i,1)-AP_x(i,2))/axlen;
        end
        skinlocin=crestskin(timesinseries,imchan2,pxsize,pysize,axboxes,AP_xuse,AP_yuse,~createdpts,zstep);
        skinlocmult(k,:,:)=skinlocin;
    end
save dumpfile skinlocmult pxsize pysize axboxes -append
end

if(~exist('stackermult'))
    stackermult=zeros(3,timesinseries,axboxes,stacksize);

    for n=1:paraxes
        k=mod(n,3)+1;
        for i=1:timesinseries
            axlen=sqrt((AP_x(i,1)-AP_x(i,2))^2+(AP_y(i,1)-AP_y(i,2))^2);
            AP_xuse(i,:)=AP_x(i,:)-(2*ptransize)*(k-2)*(AP_y(i,1)-AP_y(i,2))/axlen;
            AP_yuse(i,:)=AP_y(i,:)+(2*ptransize)*(k-2)*(AP_x(i,1)-AP_x(i,2))/axlen;
        end
        stackerin=crestdeep(timesinseries,imchan1,pxsize,pysize,axboxes,AP_xuse,AP_yuse,~createdpts);
        stackermult(k,:,:,:)=stackerin;
    end
save dumpfile stackermult -append
end

gradoutvarax=zeros(3,timesinseries,axboxes);
filterthing=fspecial('gaussian',[1 ceil(3*axboxes/20)],round(axboxes/40));
for k=1:paraxes
    skintosmooth=squeeze(mean(skinlocmult(k,1:ceil(end/1.5),:),2));
    avgdskinloc(k,:)=double(imfilter(skintosmooth,filterthing,'replicate','same'));
    for m=2:size(avgdskinloc,2)
    	slengthvec(k,m)=sqrt((egglength/size(avgdskinloc,2))^2+(avgdskinloc(k,m)-avgdskinloc(k,m-1))^2);
    end
    slengthvec(k,1)=0.5*slengthvec(k,2);
    for j=1:timesinseries
        gradin=crestgrad(squeeze(stackermult(k,j,:,:)),avgdskinloc(k,:),zsize,depth,zstep,axboxes);
        gradoutvarax(k,j,:)=gradin;
    end
end

[gradoutmult,gradfs,change,changeloc,frontend,backend]=creststats(gradoutvarax,timesinseries,axboxes);

%crestplot(gradoutmult,timesinseries,AP_x,AP_y,depth,pxsize,pysize,zsize,axboxes,time,xppm,yppm,transdir)

save dumpfile gradoutmult depth zsize avgdskinloc slengthvec frontend backend change -append
movefile('dumpfile.mat',dumppath)

if(exist('compfilek.mat'))
    load compfilek
end
if (~exist('ouridx'))
    ouridx=alreadystored+1;
end
gomcomp(ouridx,1:timesinseries,:)=gradoutmult(1:timesinseries,:);
fecomp(ouridx,1:timesinseries)=frontend(1:timesinseries);
becomp(ouridx,1:timesinseries)=backend(1:timesinseries);
changecomp(ouridx,1:timesinseries)=change(1:timesinseries);
clcomp(ouridx)=changeloc;
gfscomp(ouridx,:)=gradfs;
timecomp(ouridx,1:timesinseries)=time(1:timesinseries);
egglcomp(ouridx)=egglength;
namescomp(ouridx,:)=dumppath;
gvxcomp(ouridx,:,1:timesinseries,:)=gradoutvarax(:,1:timesinseries,:);
alreadystored=size(namescomp,1)
avscomp(ouridx,:,:)=avgdskinloc;
slveccomp(ouridx,:,:)=slengthvec;
save compfilek gomcomp fecomp becomp changecomp clcomp gfscomp timecomp egglcomp namescomp alreadystored gvxcomp avscomp slveccomp
